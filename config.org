#+TITLE: GNU Emacs Config
#+AUTHOR: Allister Isaiah Harvey
#+PROPERTY: header-args
#+DESCRIPTION: My personal Emacs config.
#+OPTIONS: toc:2 
#+STARTUP: showeverything

* IMPORTANT! Put This In Your Init.el File

#+begin_example
    (org-babel-load-file
        (expand-file-name
        "config.org"
        user-emacs-directory))
#+end_example

* About This Config 

This is my personal Emacs config.

* Package Management

** Setup Package.el To Work With MELPA

#+begin_src emacs-lisp
    (require 'package)
    (add-to-list 'package-archives
        '("melpa" . "https://melpa.org/packages/"))
    (package-refresh-contents)
    (package-initialize)
#+end_src

** Use-Package

Install use-package and enable ':ensure t' globally.

#+begin_src emacs-lisp
    (unless (package-installed-p 'use-package)
        (package-install 'use-package))
    (setq use-package-always-ensure t)
#+end_src

* Text Editor

** Auto Close Brackets, electric-pair-mode

#+begin_src emacs-lisp
    (electric-pair-mode 1)
#+end_src

** Cursor

*** Curosr Blinking

Turn on Blinking Cursor

#+begin_src emacs-lisp
    (blink-cursor-mode 1)
#+end_src

*** Cursor Style

Possible values are box, hollow, bar, hbar or nil.

#+begin_src emacs-lsp
    (setq-default cursor-type 'bar) 
#+end_src

*** Cursor Surrounding Lines

Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.

#+begin_src emacs_lisp
    (setq redisplay-dont-pause t
        scroll-margin 8
        scroll-step 1
        scroll-conservatively 10000
        scroll-preserve-screen-position 1)
#+end_src

** Font

*** Font Family

Controls the font family.

#+begin_src emacs-lisp
  (when (member "Cascadia Code" (font-family-list))
    (set-frame-font "Cascadia Code"  t))
#+end_src

*** Font Size

Controls the font size in points.

#+begin_src emacs-lisp
  (defun set-font-size(size)
    "Calculates font size"
    (setq pt (* 10 size))
    (set-face-attribute 'default nil :height pt)
  )

  (set-font-size 12)
#+end_src

** Formatting

This is formatting code

#+begin_src emacs-lisp
(use-package format-all
  :preface
  (defun ian/format-code ()
    "Auto-format whole buffer."
    (interactive)
    (if (derived-mode-p 'prolog-mode)
        (prolog-indent-buffer)
      (format-all-buffer)))
  :config
  (global-set-key (kbd "M-F") #'ian/format-code)
  (add-hook 'prog-mode-hook #'format-all-ensure-formatter))
#+end_src

** Diff Editor

*** Word Wrap

#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src

** Files

*** Type Overwrite Selection

Make typing delete/overwrites selected text

#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src

*** Lock files

By default, auto-save files are stored in the current directory with a file name on the form #file#.
If you don’t want to clutter up your file tree with Emacs’ backup files, this it to make Emacs save them
to the operating system's "temp"  directory:

#+begin_src emacs-lisp
    (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))
#+end_src

*** Auto Save Delay

Controls the delay in seconds after which an editor with unsaved changes is saved
automatically.

#+begin_src emacs-lisp
    (use-package real-auto-save)
    (add-hook 'prog-mode-hook 'real-auto-save-mode)
#+end_src

Auto save interval is 10 seconds by default. You can change it:

#+begin_src emacs-lisp
    (setq real-auto-save-interval 8) ;; in seconds
#+end_src

* Workbench

** Appearance

*** Icon Pack

#+begin_src emacs-lisp
  (use-package all-the-icons
  :ensure t)
#+end_src

*** Installed Themes

#+begin_src emacs-lisp
  (package-install `atom-one-dark-theme)
  (package-install `dracula-theme)
  (package-install `nord-theme)

  (use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

*** Color Theme

#+begin_src emacs-lisp
  (load-theme 'doom-tokyo-night t)
#+end_src

*** Scroll Bar

Enable Menubar

#+begin_src emacs-lisp
  (menu-bar-mode 1)
#+end_src

Disable Scrollbar

#+begin_src emacs-lisp
  (scroll-bar-mode 0)
#+end_src

Disable Toolbar

#+begin_src emacs-lisp
  (tool-bar-mode 0)
#+end_src

* Packages

** Evil Mode

Installs Evil mode for VIM key emulation and enables it

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+end_src

** Which Key

#+begin_src emacs-lisp
  (use-package which-key)
  (which-key-mode 1)
#+end_src

** TOC-ORG

#+begin_src emacs-lisp
  (use-package toc-org)
#+end_src

** Neotree

#+begin_src emacs-lisp
  (use-package neotree)
#+end_src

Set HotKey for Neotree toggle

#+begin_src emacs-lisp
  (global-set-key [f8] 'neotree-toggle)
#+end_src

NeoTree provides following themes: classic(default) ascii arrow icons nerd. Theme can be configed by setting neo-theme. For example, use icons for window system and arrow terminal.

#+begin_src emacs-lisp
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+end_src

** LSP Mode

#+begin_src emacs-lisp
  (use-package lsp-mode
  :ensure
  :commands lsp
  :custom
  ;; what to use when checking on-save. "check" is default, I prefer clippy
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-eldoc-render-all t)
  (lsp-idle-delay 0.6)
  ;; enable / disable the hints as you prefer:
  (lsp-rust-analyzer-server-display-inlay-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  (lsp-rust-analyzer-display-chaining-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  (lsp-rust-analyzer-display-closure-return-type-hints t)
  (lsp-rust-analyzer-display-parameter-hints nil)
  (lsp-rust-analyzer-display-reborrow-hints nil)
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode))
#+end_src

** LSP UI

#+begin_src emacs-lisp
  (use-package lsp-ui
  :ensure
  :commands lsp-ui-mode
  :custom
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable nil))
#+end_src

** Company

#+begin_src emacs-lisp
  (use-package company
  :ensure
  :custom
  (company-idle-delay 0.5) ;; how long to wait until popup
  ;; (company-begin-commands nil) ;; uncomment to disable popup
  :bind
  (:map company-active-map
	      ("C-n". company-select-next)
	      ("C-p". company-select-previous)
	      ("M-<". company-select-first)
	      ("M->". company-select-last)))
#+end_src

** Yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
  :ensure
  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook 'yas-minor-mode)
  (add-hook 'text-mode-hook 'yas-minor-mode))
#+end_src

** Doom Modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+end_src

If non-nil, cause imenu to see `doom-modeline' declarations.
This is done by adjusting `lisp-imenu-generic-expression' to
include support for finding `doom-modeline-def-*' forms.
Must be set before loading doom-modeline.

#+begin_src emacs-lisp
 (setq doom-modeline-support-imenu t)
#+end_src

How tall the mode-line should be. It's only respected in GUI.
If the actual char height is larger, it respects the actual height

#+begin_src emacs-lisp
 (setq doom-modeline-height 25)
#+end_src

How wide the mode-line bar should be. It's only respected in GUI.

#+begin_src emacs-lisp
 (setq doom-modeline-bar-width 4)
#+end_src

Whether to use hud instead of default bar. It's only respected in GUI.

#+begin_src emacs-lisp
 (setq doom-modeline-hud nil)
#+end_src

The limit of the window width.
If `window-width' is smaller than the limit, some information won't be
displayed. It can be an integer or a float number. `nil' means no limit."

#+begin_src emacs-lisp
 (setq doom-modeline-window-width-limit 0.25)
#+end_src

How to detect the project root.
nil means to use `default-directory'.
The project management packages have some issues on detecting project root.
e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
to hanle sub-projects.
You can specify one if you encounter the issue.

#+begin_src emacs-lisp
 (setq doom-modeline-project-detection 'auto)
#+end_src

Determines the style used by `doom-modeline-buffer-file-name'.
Given ~/Projects/FOSS/emacs/lisp/comint.el
  auto => emacs/lisp/comint.el (in a project) or comint.el
  truncate-upto-project => ~/P/F/emacs/lisp/comint.el
  truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
  truncate-with-project => emacs/l/comint.el
  truncate-except-project => ~/P/F/emacs/l/comint.el
  truncate-upto-root => ~/P/F/e/lisp/comint.el
  truncate-all => ~/P/F/e/l/comint.el
  truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
  relative-from-project => emacs/lisp/comint.el
  relative-to-project => lisp/comint.el
  file-name => comint.el
  buffer-name => comint.el<2> (uniquify buffer name)

If you are experiencing the laggy issue, especially while editing remote files
with tramp, please try `file-name' style.
Please refer to https://github.com/bbatsov/projectile/issues/657.

#+begin_src emacs-lisp
 (setq doom-modeline-buffer-file-name-style 'auto)
#+end_src

Whether display icons in the mode-line.
While using the server mode in GUI, should set the value explicitly.

#+begin_src emacs-lisp
 (setq doom-modeline-icon t)
#+end_src

Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.

#+begin_src emacs-lisp
 (setq doom-modeline-major-mode-icon t)
#+end_src

Whether display the colorful icon for `major-mode'.
It respects `all-the-icons-color-icons'

#+begin_src emacs-lisp
 (setq doom-modeline-major-mode-color-icon t)
#+end_src

Whether display the icon for the buffer state. It respects `doom-modeline-icon'.

#+begin_src emacs-lisp
 (setq doom-modeline-buffer-state-icon t)
#+end_src

Whether display the modification icon for the buffer.
It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.

#+begin_src emacs-lisp
 (setq doom-modeline-buffer-modification-icon t)
#+end_src

Whether to use unicode as a fallback (instead of ASCII) when not using icons.
#+begin_src emacs-lisp
 (setq doom-modeline-unicode-fallback nil)
#+end_src

Whether display the buffer name.

#+begin_src emacs-lisp
 (setq doom-modeline-buffer-name t)
#+end_src

Whether display the minor modes in the mode-line.

#+begin_src emacs-lisp
 (setq doom-modeline-minor-modes nil)
#+end_src

If non-nil, a word count will be added to the selection-info modeline segment.

#+begin_src emacs-lisp
 (setq doom-modeline-enable-word-count nil)
#+end_src

Major modes in which to display word count continuously.
Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
remove the modes from `doom-modeline-continuous-word-count-modes'.

#+begin_src emacs-lisp
 (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
#+end_src

Whether display the buffer encoding.

#+begin_src emacs-lisp
 (setq doom-modeline-buffer-encoding t)
#+end_src

Whether display the indentation information.

#+begin_src emacs-lisp
 (setq doom-modeline-indent-info nil)
#+end_src

If non-nil, only display one number for checker information if applicable.

#+begin_src emacs-lisp
 (setq doom-modeline-checker-simple-format t)
#+end_src

The maximum number displayed for notifications.

#+begin_src emacs-lisp
 (setq doom-modeline-number-limit 99)
#+end_src

The maximum displayed length of the branch name of version control.

#+begin_src emacs-lisp
 (setq doom-modeline-vcs-max-length 12)
#+end_src

Whether display the workspace name. Non-nil to display in the mode-line.

#+begin_src emacs-lisp
 (setq doom-modeline-workspace-name t)
#+end_src

Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)

#+begin_src emacs-lisp
 (setq doom-modeline-gnus-timer 2)
#+end_src

Wheter groups should be excludede when gnus automatically being updated.

#+begin_src emacs-lisp
 (setq doom-modeline-gnus-excluded-groups '("dummy.group"))
#+end_src

Whether display the IRC notifications. It requires `circe' or `erc' package.

#+begin_src emacs-lisp
 (setq doom-modeline-irc t)
#+end_src

 Function to stylize the irc buffer names.

#+begin_src emacs-lisp
 (setq doom-modeline-irc-stylize 'identity)
#+end_src

Whether display the environment version.

#+begin_src emacs-lisp
 (setq doom-modeline-env-version t)
#+end_src

Or for individual languages

#+begin_src emacs-lisp
 (setq doom-modeline-env-enable-python t)
 (setq doom-modeline-env-enable-ruby t)
 (setq doom-modeline-env-enable-perl t)
 (setq doom-modeline-env-enable-go t)
 (setq doom-modeline-env-enable-elixir t)
 (setq doom-modeline-env-enable-rust t)
#+end_src

Change the executables to use for the language version string

#+begin_src emacs-lisp
 (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
 (setq doom-modeline-env-rust-executable "rustc")
#+end_src

What to display as the version while a new one is being loaded

#+begin_src emacs-lisp
 (setq doom-modeline-env-load-string "...")
#+end_src

Hooks that run before/after the modeline version string is updated

#+begin_src emacs-lisp
 (setq doom-modeline-before-update-env-hook nil)
 (setq doom-modeline-after-update-env-hook nil)
#+end_src
